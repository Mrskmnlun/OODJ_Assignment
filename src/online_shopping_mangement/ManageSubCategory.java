/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package online_shopping_mangement;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author ASUS
 */
public class ManageSubCategory extends javax.swing.JFrame {

    /**
     * Creates new form ManageSubCategory
     */
    public ManageSubCategory() {
        initComponents();
        try{
            BufferedReader br = new BufferedReader(new FileReader("Category.txt"));
            String categorydata = br.readLine();
            DefaultTableModel tblModel = (DefaultTableModel)CategoryTable.getModel();
            
            ArrayList<String> catename = new ArrayList<String>();
            catename.add("Select");
            while ((categorydata = br.readLine())!= null){
                String[] data = categorydata.split("/"); 
                if (!data[2].equals(" ")){
                    String[] SubCategory = data[2].split(",");
                    String[] TableData = new String[3];
                    
                    for (int i=0; i<SubCategory.length; i++){
                        TableData[0] = data[0];
                        TableData[1] = data[1];
                        TableData[2] = SubCategory[i];
                        tblModel.addRow(TableData);
                    }
                }
                catename.add(data[1]);
            }
            
            Object[] name = catename.toArray();
            category.setModel(new javax.swing.DefaultComboBoxModel(name));
            
            br.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "Error occurs while reading file.", "System Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void filter(String query){
        DefaultTableModel tblModel = (DefaultTableModel)CategoryTable.getModel();
        TableRowSorter<DefaultTableModel> tr=new TableRowSorter<DefaultTableModel>(tblModel);
        CategoryTable.setRowSorter(tr);
        
        tr.setRowFilter(RowFilter.regexFilter(query));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nav = new javax.swing.JPanel();
        resortroombookingsystem = new javax.swing.JLabel();
        backbtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        deletebtn = new javax.swing.JButton();
        categoryid = new javax.swing.JTextField();
        clearbtn = new javax.swing.JButton();
        updatebtn = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        CategoryTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        addbtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        subcategory = new javax.swing.JTextField();
        category = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Manage Sub Category");

        nav.setBackground(new java.awt.Color(255, 204, 51));

        resortroombookingsystem.setFont(new java.awt.Font("Tw Cen MT", 1, 24)); // NOI18N
        resortroombookingsystem.setForeground(new java.awt.Color(255, 255, 255));
        resortroombookingsystem.setText("Manage Sub Category");

        backbtn.setBackground(new java.awt.Color(255, 255, 204));
        backbtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        backbtn.setForeground(new java.awt.Color(51, 51, 51));
        backbtn.setText("Back");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout navLayout = new javax.swing.GroupLayout(nav);
        nav.setLayout(navLayout);
        navLayout.setHorizontalGroup(
            navLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(resortroombookingsystem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );
        navLayout.setVerticalGroup(
            navLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(navLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resortroombookingsystem)
                    .addComponent(backbtn))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Category ID: ");

        deletebtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        deletebtn.setText("Delete");
        deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnActionPerformed(evt);
            }
        });

        categoryid.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        categoryid.setEnabled(false);

        clearbtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        clearbtn.setText("Clear");
        clearbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearbtnActionPerformed(evt);
            }
        });

        updatebtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        updatebtn.setText("Update");
        updatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatebtnActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("Search:");

        search.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });

        CategoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Category ID", "Category Name", "Sub Category Name"
            }
        ));
        CategoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CategoryTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(CategoryTable);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Category Name:");

        addbtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addbtn.setText("Add");
        addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbtnActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Sub Category Name:");

        subcategory.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        subcategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subcategoryActionPerformed(evt);
            }
        });

        category.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(nav, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel1))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(categoryid)
                                .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addGap(18, 18, 18)
                            .addComponent(subcategory, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deletebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clearbtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updatebtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(31, 31, 31)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(nav, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(categoryid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(subcategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updatebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clearbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deletebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(81, 81, 81))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbtnActionPerformed
        String CategoryID = categoryid.getText();
        String CategoryName = category.getSelectedItem().toString();
        String SubCategoryName = subcategory.getText();
//        ArrayList<String> cateid = new ArrayList<String>();
//        ArrayList<String> subcatename = new ArrayList<String>();
        String Subcategory = null;
        try{
            BufferedReader br = new BufferedReader(new FileReader("Category.txt"));
            String categorydata = br.readLine();
          
            while ((categorydata = br.readLine())!= null){
                String[] data = categorydata.split("/"); 
                if (CategoryID.equals(data[0])){
                    Subcategory = data[2];
                }
            }
            br.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "Error occurs while reading file.", "System Error", JOptionPane.ERROR_MESSAGE);
        }
        
        String[] Array = Subcategory.split(",");
        //convert array to arraylist
        ArrayList<String> SubcategoryArray = new ArrayList<String>(Arrays.asList(Array));
        
        if (CategoryID.equals("")){
            JOptionPane.showMessageDialog(rootPane, "Please select the Category.", "System Error", JOptionPane.ERROR_MESSAGE);
        }
        else if(SubCategoryName.equals("")){
            JOptionPane.showMessageDialog(rootPane, "Please enter the Sub Category Name.", "System Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
            if (!SubcategoryArray.contains(SubCategoryName)){
                try{
                    File categoryrecord = new File("Category.txt");
                    File tempfile = new File("temp.txt");
                    BufferedReader br = new BufferedReader(new FileReader("Category.txt"));
                    PrintWriter appenddata =new PrintWriter(new BufferedWriter(new FileWriter("temp.txt", true)));
                    String line = null;
                    while ((line = br.readLine())!= null){
                        String[] data = line.split("/");
                        if (data[0].equals(CategoryID)){
                            if (data[2].equals(" ")){
                               appenddata.println(data[0]+"/"+data[1]+"/"+SubCategoryName);
                               appenddata.flush();
                            }
                            else{
                               appenddata.println(line+","+SubCategoryName);
                               appenddata.flush();
                            }
                            
                        }
                        else{
                            appenddata.println(line);
                            appenddata.flush();
                        }
                    }   
                    appenddata.close();
                    br.close();
                    
                    if (!categoryrecord.delete()){
                        JOptionPane.showMessageDialog(rootPane, "Could not delete the file.", "System Error", JOptionPane.ERROR_MESSAGE);
                    }
                    
                    if (!tempfile.renameTo(categoryrecord)){
                        JOptionPane.showMessageDialog(rootPane, "Could not rename the file", "System Error", JOptionPane.ERROR_MESSAGE);
                    }
                }    
                catch(Exception e){
                   JOptionPane.showMessageDialog(rootPane, "Error occurs while reading file.", "System Error", JOptionPane.ERROR_MESSAGE);
                }
                
                JOptionPane.showMessageDialog(rootPane, "The data was added.", "Add Sub Category", JOptionPane.INFORMATION_MESSAGE);
                
                DefaultTableModel tblModel = (DefaultTableModel)CategoryTable.getModel();
                tblModel.setNumRows(0);
                try(BufferedReader br = new BufferedReader(new FileReader("Category.txt"))){
                    String categorydata = br.readLine();
                    
                    while ((categorydata = br.readLine())!= null){
                        String[] data = categorydata.split("/"); 
                        if (!data[2].equals(" ")){
                            String[] SubCategory = data[2].split(",");
                            String[] TableData = new String[3];
                            
                            for (int i=0; i<SubCategory.length; i++){
                                TableData[0] = data[0];
                                TableData[1] = data[1];
                                TableData[2] = SubCategory[i];
                                tblModel.addRow(TableData);
                            }
                        }
                        
                    }
                    
                    br.close();
                    
                    categoryid.setText("");
                    subcategory.setText("");
                    category.setSelectedIndex(0);
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(rootPane, "Error occurs while reading file.", "System Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "Sub Category Name already exist.", "System Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_addbtnActionPerformed

    private void subcategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subcategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subcategoryActionPerformed

    private void categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryActionPerformed
        String categoryname = category.getSelectedItem().toString();
        
        try{
            BufferedReader br = new BufferedReader(new FileReader("Category.txt"));
            String categorydata = br.readLine();
            
            while ((categorydata = br.readLine())!= null){
                String[] data = categorydata.split("/"); 
                if (categoryname.equals(data[1])){
                    categoryid.setText(data[0]);
                }
            }
            
            
            br.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "Error occurs while reading file.", "System Error", JOptionPane.ERROR_MESSAGE);
        }

        
    }//GEN-LAST:event_categoryActionPerformed

    private void clearbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearbtnActionPerformed
        categoryid.setText("");
        subcategory.setText("");
        category.setSelectedIndex(0);
    }//GEN-LAST:event_clearbtnActionPerformed

    private void updatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatebtnActionPerformed
        String CategoryID = categoryid.getText();
        String CategoryName = category.getSelectedItem().toString();
        String SubCategoryName = subcategory.getText();
//        ArrayList<String> cateid = new ArrayList<String>();
//        ArrayList<String> subcatename = new ArrayList<String>();
        String Subcategory = null;
        try{
            BufferedReader br = new BufferedReader(new FileReader("Category.txt"));
            String categorydata = br.readLine();
          
            while ((categorydata = br.readLine())!= null){
                String[] data = categorydata.split("/"); 
                if (CategoryID.equals(data[0])){
                    Subcategory = data[2];
                }
            }
            br.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "Error occurs while reading file.", "System Error", JOptionPane.ERROR_MESSAGE);
        }
        
        if (CategoryID.equals("")){
            JOptionPane.showMessageDialog(rootPane, "Please select the Category.", "System Error", JOptionPane.ERROR_MESSAGE);
        }
        else if(SubCategoryName.equals("")){
            JOptionPane.showMessageDialog(rootPane, "Please enter the Sub Category Name.", "System Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
            String[] Array = Subcategory.split(",");
            //convert array to arraylist
            ArrayList<String> SubcategoryArray = new ArrayList<String>(Arrays.asList(Array));
            if (!SubcategoryArray.contains(SubCategoryName)){
                try{
                    DefaultTableModel tblModel = (DefaultTableModel)CategoryTable.getModel();
                    String subcategoryname = tblModel.getValueAt(CategoryTable.getSelectedRow(), 2).toString();
                    File categoryrecord = new File("Category.txt");
                    File tempfile = new File("temp.txt");
                    BufferedReader br = new BufferedReader(new FileReader("Category.txt"));
                    PrintWriter appenddata =new PrintWriter(new BufferedWriter(new FileWriter("temp.txt", true)));
                    String line = null;
                    while ((line = br.readLine())!= null){
                        String[] data = line.split("/");
                        if (data[0].equals(CategoryID)){
                            String newdata = data[2].replace(subcategoryname, SubCategoryName);
                            appenddata.println(CategoryID+"/"+CategoryName+"/"+newdata);
                            appenddata.flush();
                        }
                        else{
                            appenddata.println(line);
                            appenddata.flush();
                        }
                    }   
                    appenddata.close();
                    br.close();
                    
                    if (!categoryrecord.delete()){
                        JOptionPane.showMessageDialog(rootPane, "Could not delete the file.", "System Error", JOptionPane.ERROR_MESSAGE);
                    }
                    
                    if (!tempfile.renameTo(categoryrecord)){
                        JOptionPane.showMessageDialog(rootPane, "Could not rename the file", "System Error", JOptionPane.ERROR_MESSAGE);
                    }
                }    
                catch(Exception e){
                   JOptionPane.showMessageDialog(rootPane, "Error occurs while reading file.", "System Error", JOptionPane.ERROR_MESSAGE);
                }
                
                JOptionPane.showMessageDialog(rootPane, "Update Successful", "Update Success", JOptionPane.INFORMATION_MESSAGE);
                
                DefaultTableModel tblModel = (DefaultTableModel)CategoryTable.getModel();
                tblModel.setNumRows(0);
                try(BufferedReader br = new BufferedReader(new FileReader("Category.txt"))){
                    String categorydata = br.readLine();
                    
                    while ((categorydata = br.readLine())!= null){
                        String[] data = categorydata.split("/"); 
                        if (!data[2].equals(" ")){
                            String[] SubCategory = data[2].split(",");
                            String[] TableData = new String[3];
                            
                            for (int i=0; i<SubCategory.length; i++){
                                TableData[0] = data[0];
                                TableData[1] = data[1];
                                TableData[2] = SubCategory[i];
                                tblModel.addRow(TableData);
                            }
                        }
                        
                    }
                    
                    br.close();
                    
                    categoryid.setText("");
                    subcategory.setText("");
                    category.setSelectedIndex(0);
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(rootPane, "Error occurs while reading file.", "System Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "Sub Category Name already exist.", "System Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_updatebtnActionPerformed

    private void CategoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CategoryTableMouseClicked
        DefaultTableModel tblModel = (DefaultTableModel)CategoryTable.getModel();
        String CategoryID = tblModel.getValueAt(CategoryTable.getSelectedRow(), 0).toString();
        String CategoryName = tblModel.getValueAt(CategoryTable.getSelectedRow(), 1).toString();
        String SubCategoryName = tblModel.getValueAt(CategoryTable.getSelectedRow(), 2).toString();
        
        categoryid.setText(CategoryID);
        category.setSelectedItem(CategoryName);
        subcategory.setText(SubCategoryName);
    }//GEN-LAST:event_CategoryTableMouseClicked

    private void deletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebtnActionPerformed
        String CategoryID = categoryid.getText();
        String CategoryName = category.getSelectedItem().toString();
        String SubCategoryName = subcategory.getText();
//        ArrayList<String> cateid = new ArrayList<String>();
//        ArrayList<String> subcatename = new ArrayList<String>();
        String Subcategory = null;
        try{
            BufferedReader br = new BufferedReader(new FileReader("Category.txt"));
            String categorydata = br.readLine();
          
            while ((categorydata = br.readLine())!= null){
                String[] data = categorydata.split("/"); 
                if (CategoryID.equals(data[0])){
                    Subcategory = data[2];
                }
            }
            br.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "Error occurs while reading file.", "System Error", JOptionPane.ERROR_MESSAGE);
        }
        
        if (CategoryID.equals("")){
            JOptionPane.showMessageDialog(rootPane, "Please select the Category.", "System Error", JOptionPane.ERROR_MESSAGE);
        }
        else if(SubCategoryName.equals("")){
            JOptionPane.showMessageDialog(rootPane, "Please enter the Sub Category Name.", "System Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
            String[] Array = Subcategory.split(",");
            //convert array to arraylist
            ArrayList<String> SubcategoryArray = new ArrayList<String>(Arrays.asList(Array));
            if (SubcategoryArray.contains(SubCategoryName)){
                try{
                    File categoryrecord = new File("Category.txt");
                    File tempfile = new File("temp.txt");
                    BufferedReader br = new BufferedReader(new FileReader("Category.txt"));
                    PrintWriter appenddata =new PrintWriter(new BufferedWriter(new FileWriter("temp.txt", true)));
                    String line = null;
                    while ((line = br.readLine())!= null){
                        String[] data = line.split("/");
                        if (data[0].equals(CategoryID)){
                            if (SubcategoryArray.size()==1){
                                SubcategoryArray.remove(SubCategoryName);
                                String newdata = " ";
                                appenddata.println(CategoryID+"/"+CategoryName+"/"+newdata);
                                appenddata.flush();
                            }
                            else{
                                SubcategoryArray.remove(SubCategoryName);
                                String newdata = String.join(",", SubcategoryArray);
                                appenddata.println(CategoryID+"/"+CategoryName+"/"+newdata);
                                appenddata.flush();
                            }
                        }
                        else{
                            appenddata.println(line);
                            appenddata.flush();
                        }
                    }   
                    appenddata.close();
                    br.close();
                    
                    if (!categoryrecord.delete()){
                        JOptionPane.showMessageDialog(rootPane, "Could not delete the file.", "System Error", JOptionPane.ERROR_MESSAGE);
                    }
                    
                    if (!tempfile.renameTo(categoryrecord)){
                        JOptionPane.showMessageDialog(rootPane, "Could not rename the file", "System Error", JOptionPane.ERROR_MESSAGE);
                    }
                }    
                catch(Exception e){
                   JOptionPane.showMessageDialog(rootPane, "Error occurs while reading file.", "System Error", JOptionPane.ERROR_MESSAGE);
                }
                
                //delete product in the category
                try{
                    File productrecord = new File("Product.txt");
                    File tempfile2 = new File("temp.txt");
                    BufferedReader br2 = new BufferedReader(new FileReader("Product.txt"));
                    PrintWriter appenddata2 =new PrintWriter(new BufferedWriter(new FileWriter("temp.txt", true)));
                    String line2 = null;
                    while ((line2 = br2.readLine())!= null){
                        String[] data = line2.split("/");
                        if (!data[3].equals(SubCategoryName)){
                            appenddata2.println(line2);
                            appenddata2.flush();
                        }
                        
                    }
                    appenddata2.close();
                    br2.close();
                    
                    if (!productrecord.delete()){
                        JOptionPane.showMessageDialog(rootPane, "Could not delete the file.", "System Error", JOptionPane.ERROR_MESSAGE);
                    }
                    
                    if (!tempfile2.renameTo(productrecord)){
                        JOptionPane.showMessageDialog(rootPane, "Could not rename the file", "System Error", JOptionPane.ERROR_MESSAGE);
                    }
                    
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(rootPane, "Error occurs while reading file.", "System Error", JOptionPane.ERROR_MESSAGE);
                }

                JOptionPane.showMessageDialog(rootPane, "The data was deleted", "Delete Sub Category", JOptionPane.INFORMATION_MESSAGE);
                
                DefaultTableModel tblModel = (DefaultTableModel)CategoryTable.getModel();
                tblModel.setNumRows(0);
                try(BufferedReader br = new BufferedReader(new FileReader("Category.txt"))){
                    String categorydata = br.readLine();
                    
                    while ((categorydata = br.readLine())!= null){
                        String[] data = categorydata.split("/"); 
                        if (!data[2].equals(" ")){
                            String[] SubCategory = data[2].split(",");
                            String[] TableData = new String[3];
                            
                            for (int i=0; i<SubCategory.length; i++){
                                TableData[0] = data[0];
                                TableData[1] = data[1];
                                TableData[2] = SubCategory[i];
                                tblModel.addRow(TableData);
                            }
                        }
                        
                    }
                    
                    br.close();
                    
                    categoryid.setText("");
                    subcategory.setText("");
                    category.setSelectedIndex(0);
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(rootPane, "Error occurs while reading file.", "System Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "Sub Category Name is not exist.", "System Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_deletebtnActionPerformed

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        ManageCategory mc = new ManageCategory();
        mc.setVisible(true);
        dispose();
    }//GEN-LAST:event_backbtnActionPerformed

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
        String query=search.getText();
        
        filter(query);
    }//GEN-LAST:event_searchKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageSubCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageSubCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageSubCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageSubCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageSubCategory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CategoryTable;
    private javax.swing.JButton addbtn;
    private javax.swing.JButton backbtn;
    private javax.swing.JComboBox<String> category;
    private javax.swing.JTextField categoryid;
    private javax.swing.JButton clearbtn;
    private javax.swing.JButton deletebtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel nav;
    private javax.swing.JLabel resortroombookingsystem;
    private javax.swing.JTextField search;
    private javax.swing.JTextField subcategory;
    private javax.swing.JButton updatebtn;
    // End of variables declaration//GEN-END:variables
}
